# .github/workflows/rics_to_meta.yml

on:
  workflow_dispatch:

jobs:
  rics-to-meta:
    name: Sync RICS → Meta Offline Events
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.x'

      - name: Install dependencies
        run: |
          pip install -r requirements.txt
          pip install google-api-python-client google-auth

      - name: Ensure data directory
        run: mkdir -p data

      - name: Download latest RICS export from Google Drive
        env:
          GDRIVE_SA_KEY:          ${{ secrets.GDRIVE_SA_KEY }}
          GDRIVE_FOLDER_ID_RICS:  ${{ secrets.GDRIVE_FOLDER_ID_RICS }}
        run: |
          echo "$GDRIVE_SA_KEY" | base64 --decode > /tmp/sa.json
          python - <<'PYCODE'
import os, io
from google.oauth2 import service_account
from googleapiclient.discovery import build
from googleapiclient.http import MediaIoBaseDownload

creds = service_account.Credentials.from_service_account_file(
    "/tmp/sa.json",
    scopes=["https://www.googleapis.com/auth/drive.readonly"]
)
drive = build("drive", "v3", credentials=creds)

folder_id = os.environ["GDRIVE_FOLDER_ID_RICS"]
resp = drive.files().list(
    q=f"'{folder_id}' in parents and trashed = false",
    fields="files(id,name,createdTime)"
).execute()

files = resp.get("files", [])
if not files:
    raise SystemExit("❌ No files found!")

latest = max(files, key=lambda f: f["createdTime"])
file_id, name = latest["id"], latest["name"]
print(f"Downloading {name}")

request = drive.files().get_media(fileId=file_id)
with io.FileIO("data/rics.csv", mode="wb") as fh:
    downloader = MediaIoBaseDownload(fh, request)
    done = False
    while not done:
        status, done = downloader.next_chunk()
        print(f"{int(status.progress() * 100)}% done")
print("Downloaded to data/rics.csv")
PYCODE

      - name: Run Meta upload
        env:
          META_OFFLINE_SET_ID: ${{ secrets.META_OFFLINE_SET_ID }}
          META_OFFLINE_TOKEN:   ${{ secrets.META_OFFLINE_TOKEN }}
          RICS_CSV_PATH:        data/rics.csv
        run: python scripts/sync_rics_to_meta.py
